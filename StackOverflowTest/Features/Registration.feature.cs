// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.0.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StackOverflowTest.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Registration")]
    public partial class RegistrationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Registration.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Registration", "This feature will test Registration functionality", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Succesful registration")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SuccesfulRegistration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Succesful registration", new string[] {
                        "mytag"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("Client is on Register page");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "UserName",
                        "FirstName",
                        "LastName",
                        "Password",
                        "RepeatPassword"});
            table1.AddRow(new string[] {
                        "test@test5",
                        "Test55",
                        "Test55",
                        "Test55",
                        "Test55",
                        "Test55"});
#line 7
 testRunner.When("Client enter valid values and press Create", ((string)(null)), table1);
#line 10
 testRunner.Then("Client is on Index page");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unsuccesful registration with bad Password input")]
        public virtual void UnsuccesfulRegistrationWithBadPasswordInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unsuccesful registration with bad Password input", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("Client is on Register page");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "UserName",
                        "FirstName",
                        "LastName",
                        "Password",
                        "RepeatPassword"});
            table2.AddRow(new string[] {
                        "testMail",
                        "test",
                        "test",
                        "test",
                        "test",
                        "test"});
#line 16
 testRunner.When("Client enter invalid values and press Create", ((string)(null)), table2);
#line 19
 testRunner.Then("Client get Password warning message");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unsuccesful registration with bad Email input")]
        public virtual void UnsuccesfulRegistrationWithBadEmailInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unsuccesful registration with bad Email input", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("Client is on Register page");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "UserName",
                        "FirstName",
                        "LastName",
                        "Password",
                        "RepeatPassword"});
            table3.AddRow(new string[] {
                        "testMail",
                        "test4",
                        "test4",
                        "test4",
                        "Test4",
                        "Test4"});
#line 24
 testRunner.When("Client enter invalid values and press Create", ((string)(null)), table3);
#line 27
 testRunner.Then("Client get another  warning message");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unsuccesful registration without inputs")]
        public virtual void UnsuccesfulRegistrationWithoutInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unsuccesful registration without inputs", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("Client is on Register page");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "UserName",
                        "FirstName",
                        "LastName",
                        "Password",
                        "RepeatPassword"});
            table4.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 32
 testRunner.When("Client enter invalid values and press Create", ((string)(null)), table4);
#line 35
 testRunner.Then("Client get warning message for required fields");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
